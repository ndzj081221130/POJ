package p3274_ac_quicksort;import java.util.Scanner;public class Main {	/**	 * @param args	 */	public static void main(String[] args) {		Scanner scanner = new Scanner(System.in);		int n = scanner.nextInt();		int k = scanner.nextInt();		int[][] sum = new int[n][k];		int[][] after = new int[n][k];		for (int i = 0; i < n; i++) {			int num = scanner.nextInt();			String bits = Integer.toBinaryString(num);			int init_length = bits.length();			if (bits.length() < k) {				for (int add_i = 0; add_i < k - init_length; add_i++) {					bits = "0" + bits;				}			}//			System.out.println("bits:" + bits);			for (int j = 0; j < bits.length(); j++) {				if (bits.charAt(j) == '1') {					if (i>=1) {						sum[i][j] += (1 + sum[i-1][j]);					}else {						sum[i][j] += 1;					}									}else {//char = '0'					if (i >= 1) {						sum[i][j] = sum[i-1][j]; 					}else {						sum[i][j] += 0;					}				}			}		}//		for (int i = 0; i < sum.length; i++) {//			for (int j = 0; j < k; j++) {				//				System.out.print(sum[i][j]);//			}//			System.out.println();//		}				Line[] lineArray = new Line[n];		for (int i = 0; i < sum.length; i++) {			for (int j = 0; j < k; j++) {								after[i][j] = sum[i][j]-sum[i][0];//				System.out.print(after[i][j]);			}			lineArray[i] = new Line(after[i],i);//			System.out.println();		}		 //		for (int i = 0; i < n; i++) {//			System.out.println(lineArray[i]);//		}//		System.out.println();		QuickSortLine(lineArray,0,n-1);//		for (int i = 0; i < n; i++) {//			System.out.println(lineArray[i]);//		}		Line curLine = lineArray[0];		int min_index= curLine.getIndex();		int max_index= curLine.getIndex();		int max = 0;		int max_full0 = -1;		if (check0(curLine.getArr())) {			max_full0 = curLine.getIndex();		}		for (int i = 1; i < lineArray.length; i++) {			Line nextLine = lineArray[i];			if (check0(nextLine.getArr()) && max_full0 < nextLine.getIndex()) {				max_full0 = nextLine.index;			}			if (curLine.compare(nextLine) == 0) {				if (curLine.getIndex() < min_index) {					min_index = curLine.getIndex();				}				if (nextLine.getIndex() < min_index) {					min_index = nextLine.getIndex();				}				if (curLine.getIndex() > max_index) {					max_index = curLine.getIndex();				}				if (nextLine.getIndex() > max_index) {					max_index = nextLine.getIndex();				}				int cur_max = max_index - min_index;				if (max < cur_max) {					max = cur_max;				}			}else{				curLine = nextLine;				min_index = curLine.getIndex();				max_index = curLine.getIndex();			}		}				if (max > max_full0 + 1) {			System.out.println(max);		}else {			System.out.println(max_full0+1);		}			}		static boolean check0(int[]array){		boolean flag = true;		for (int i = 0; i < array.length; i++) {			if (array[i] != 0) {				flag = false;				break;			}		}		return flag;	}	static class Line{		int[] arr;		int index ;		public Line(int[] ar,int in) {			arr = new int[ar.length];			for (int i = 0; i < ar.length; i++) {				arr[i] = ar[i];			}			index = in;		}				public int[] getArr() {			return arr;		}		public void setArr(int[] arr) {			this.arr = arr;		}		public int getIndex() {			return index;		}		public void setIndex(int index) {			this.index = index;		}		public int compare(Line line){			int flag = 0;						int[] lineArr = line.getArr();			for (int i = 0; i < lineArr.length; i++) {				if (arr[i] < lineArr[i]) {					flag = -1;					break;				}else if(arr[i] > lineArr[i]) {					flag = 1;					break;				}else{					flag = 0;				}			}			return flag;		}				public String toString() {			String reString = index+":";			for (int i = 0; i < arr.length; i++) {				reString+= arr[i] +",";			}			return reString;		}	}		 			private static void QuickSortLine(Line[] array,int left,int right) {		// TODO Auto-generated method stub		if (left < right) {			int pivotpos = partitionLine(array,left,right);			QuickSortLine(array, left, pivotpos-1);			QuickSortLine(array, pivotpos+1, right);		}	}	private static int partitionLine(Line[] array, int left, int right) {		int pivotpos = left;		Line pivot = array[left];		for (int in = left+1; in <= right; in++) {			if (array[in].compare(pivot) == -1) {				pivotpos++;				if (pivotpos != in) {//					for (int i = 0; i < array.length; i++) {//						System.out.println(array[i]);//					}//					//					System.out.println("---");					SwapLine(array,pivotpos,in);				}			}					}		array[left] = array[pivotpos];		array[pivotpos] = pivot;		return pivotpos;	}	private static void SwapLine(Line[] array, int pivotpos, int i) {		Line temp = array[i];		array[i] = array[pivotpos];		array[pivotpos] = temp;	}	}