package p3349snowflake_wa;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.StringTokenizer;public class Main {	/**	 * @param args	 */	public static int prime = 14997;	public static void main(String[] args) {		// TODO Auto-generated method stub		// Scanner scanner = new Scanner(System.in);		BufferedReader cin = new BufferedReader(				new InputStreamReader(System.in));		int n;		try {			n = Integer.parseInt(cin.readLine());			int[][] array = new int[n][6];			ArrayList<Snow>[] hash = new ArrayList[prime];// Snow[prime][];			boolean flag = false;			for (int i = 0; i < n; i++) {				int sum = 0;				String inputString;				inputString = cin.readLine();				StringTokenizer st = new StringTokenizer(inputString);				for (int j = 0; j < 6; j++) {					int aj = Integer.parseInt(st.nextToken());					array[i][j] = aj;					sum += aj;				}				Snow snow = new Snow(array[i]);				int index = sum % 14997;				if (hash[index] == null) {					hash[index] = new ArrayList<Snow>();					hash[index].add(snow);				} else {					ArrayList<Snow> cur = hash[index];					int size = cur.size();					if (size != 0) {						flag = Compare(cur, snow);						if (flag) {							System.out.println("Twin snowflakes found.");							return;						}					}					hash[index].add(snow);// snow;				}			}			System.out.println("No two snowflakes are alike.");		} catch (NumberFormatException e1) {			// TODO Auto-generated catch block			e1.printStackTrace();		} catch (IOException e1) {			// TODO Auto-generated catch block			e1.printStackTrace();		}		// alike(array,n,6);	}	private static boolean Compare(ArrayList<Snow> cur, Snow snow) {		// TODO Auto-generated method stub		boolean flag = false;		for (int i = 0; i < cur.size(); i++) {			flag = compare(cur.get(i), snow);			if (flag) {				return flag;			}		}		return flag;	}	private static boolean compare(Snow snow1, Snow snow2) {		// TODO Auto-generated method stub		int i = 0;		int j = 0;		int[] arr1 = snow1.getEdges();		int[] arr2 = snow2.getEdges();		for (j = 0; j < 6; j++) {			if (arr1[i] == arr2[j]) {				break;			}		}		int[] snow2_new = getNew(arr2, j);		boolean flag = equal(arr1, snow2_new);		if (flag) {			return true;		} else {			flag = equal(arr1, getNewReverse(snow2_new));			if (flag) {				return true;			}		}		return false;	}	private static boolean equal(int[] snow1, int[] snow2_new) {		// TODO Auto-generated method stub		if (snow1.length == snow2_new.length) {			for (int i = 0; i < snow2_new.length; i++) {				if (snow1[i] != snow2_new[i]) {					return false;				}			}			return true;		} else			return false;	}	private static int[] getNew(int[] arr2, int j) {		// TODO Auto-generated method stub		int[] res = new int[6];		for (int i = 0; i < res.length; i++) {			res[(i - j + 6) % 6] = arr2[i];		}		return res;	}	private static int[] getNewReverse(int arr[]) {		int[] re = new int[6];		for (int i = 0; i < arr.length; i++) {			re[i] = arr[(6 - i) % 6];		}		return re;	}	static class Snow {		int[] edges;		public int[] getEdges() {			return edges;		}		public void setEdges(int[] edges) {			this.edges = edges;		}		public Snow(int[] a) {			edges = new int[6];			for (int i = 0; i < 6; i++) {				edges[i] = a[i];			}		}	}}