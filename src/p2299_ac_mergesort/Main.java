package p2299_ac_mergesort;import java.util.ArrayList;import java.util.Scanner;public class Main {	/**	 * @param args	 */	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner scanner = new Scanner(System.in);		long n = scanner.nextLong();//nextInt();		while (n != 0) {			ArrayList<Long> list = new ArrayList<Long>();			for (int i = 0; i < n; i++) {				list.add(scanner.nextLong());//.nextInt());			}			 			Main main = new Main();			main.mergeSort(list);//Count(list);			System.out.println(main.countR);			n = scanner.nextInt();		}	} 	private long countR = 0;	 ArrayList<Long> mergeSort(ArrayList<Long> L) {		if (L.size() <= 1) {			return L;		}		ArrayList<Long> first = new ArrayList<Long>();		ArrayList<Long> second = new ArrayList<Long>();		int n = L.size();		int half = n / 2;		for (int i = 0; i < n; i++) {			if (i < half) {				first.add(L.get(i));			} else {				second.add(L.get(i));			}		}		return merge(mergeSort(first), mergeSort(second));	}	private  ArrayList<Long> merge(ArrayList<Long> first,			ArrayList<Long> second) { 		ArrayList<Long> re = new ArrayList<Long>();		int s1 = 0;		int s2 = 0;		while(s1 < first.size() && s2 < second.size()){			if (first.get(s1) < second.get(s2)) {				re.add(first.get(s1));				s1++;			}else {				re.add(second.get(s2));				s2++;				countR += (first.size() - s1);			}		}		while(s1 < first.size()){			re.add(first.get(s1++));		}		while(s2 < second.size())			re.add(second.get(s2++));		return re;	}		 int mergeCount(ArrayList<Long> L) {		if (L.size() <= 1) {			return 0;		}		ArrayList<Long> first = new ArrayList<Long>();		ArrayList<Long> second = new ArrayList<Long>();		int n = L.size();		int half = n / 2;		for (int i = 0; i < n; i++) {			if (i < half) {				first.add(L.get(i));			} else {				second.add(L.get(i));			}		}		return mergeC(mergeSort(first), mergeSort(second));	}	private  int mergeC(ArrayList<Long> first,			ArrayList<Long> second) { 		ArrayList<Long> re = new ArrayList<Long>();		int s1 = 0;		int s2 = 0;		int count = 0;		while(s1 < first.size() && s2 < second.size()){			if (first.get(s1) < second.get(s2)) {				re.add(first.get(s1));				s1++;			}else {				re.add(second.get(s2));				s2++;				count += (first.size() - s1);			}		}		while(s1 < first.size()){			re.add(first.get(s1++));		}		while(s2 < second.size())			re.add(second.get(s2++));		return count;	}	}