package p3080_dna_wa;//WAimport java.util.ArrayList;import java.util.Scanner;public class Main {	/**	 * @param args	 */	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner scanner = new Scanner(System.in);		int caseNum = scanner.nextInt();		for (int i = 0; i < caseNum; i++) {			int n = scanner.nextInt();			ArrayList<String> list = new ArrayList<String>();			for (int j = 0; j < n; j++) {				list.add(scanner.next());			}			printCommonSubstring(list, n);		}	}	private static void printCommonSubstring(ArrayList<String> list, int n) {		ArrayList<String> reStrings = getCommonSubstring(list, n);		if (reStrings.size() == 0) {			System.out.println("no significant commonalities");			return;		}		String first = reStrings.get(0);		if (first.length() < 3) {			System.out.println("no significant commonalities");		} else {			System.out.println(first);		}	}	private static ArrayList<String> getCommonSubstring(ArrayList<String> list,			int n) {		ArrayList<String> reStrings = null;		if (n == 1) {			reStrings = new ArrayList<String>();			reStrings.add(list.get(0));		} else if (n == 2) {			reStrings = getCommon(list.get(0), list.get(1));		} else {			int half = list.size() / 2;			ArrayList<String> first = new ArrayList<String>();			ArrayList<String> second = new ArrayList<String>();			for (int i = 0; i < list.size(); i++) {				if (i <= half) {					first.add(list.get(i));				} else {					second.add(list.get(i));				}			}			ArrayList<String> firstCommon = getCommonSubstring(first,					first.size());			ArrayList<String> secondCommon = getCommonSubstring(second,					second.size());			reStrings = getCommonList(firstCommon, secondCommon);		}		return reStrings;	}	private static ArrayList<String> getCommonList(			ArrayList<String> firstCommon, ArrayList<String> secondCommon) {		ArrayList<String> reStrings = new ArrayList<String>();		for (int first_i = 0; first_i < firstCommon.size(); first_i++) {			String first = firstCommon.get(first_i);			for (int second_j = 0; second_j < secondCommon.size(); second_j++) {				String second = secondCommon.get(second_j);				if (first.equals(second)) {					reStrings.add(first);				} else if (first.contains(second)) {					if (first.length() == 60) {						reStrings.add(second);					} else						reStrings.add(first);				} else if (second.contains(first)) {					if (second.length() == 60) {						reStrings.add(first);					} else						reStrings.add(second);				} else {					ArrayList<String> part = getCommon(first, second);					reStrings.addAll(part);				}			}		}		// clean(reStrings);//		return reStrings;	}	private static ArrayList<String> clean(ArrayList<String> reStrings) {		// TODO Auto-generated method stub		return null;	}	private static ArrayList<String> getCommon(String stringA, String stringB) {		ArrayList<String> enumerate = getAllSub(stringA);		ArrayList<String> commonSub = new ArrayList<String>();		for (int i = 0; i < enumerate.size(); i++) {			String sub = enumerate.get(i);			if (stringB.contains(sub) && stringB.length() >= 3) {				commonSub.add(sub);			}		}		ArrayList<String> res = getOne(commonSub);		return res;	}	private static ArrayList<String> getOne(ArrayList<String> commonSub) {		ArrayList<String> res = new ArrayList<String>();		if (commonSub.size() == 0) {			return res;		}		String max = commonSub.get(0);		int count = 1;		while (count < commonSub.size()) {			String next = commonSub.get(count);			if (next.length() > max.length()) {				max = next;			} else if (next.length() == max.length() && next.compareTo(max) < 0) {				max = next;			}			count++;		}		res.add(max);		return res;	}	private static ArrayList<String> getAllSub(String stringA) {		ArrayList<String> subs = new ArrayList<String>();		for (int i = 0; i < stringA.length(); i++) {			for (int j = i + 2; j < stringA.length(); j++) {				String sub = stringA.substring(i, j);				if (subs.contains(sub) == false && sub.length() >= 3) {					subs.add(sub);					// System.out.print(sub+",");				}			}		}		// System.out.println();		return subs;	}}