package p3295_tautology_ac;import java.util.Scanner;import java.util.Stack;public class MainFail {	public static void main(String[] args) {		Scanner scanner = new Scanner(System.in);		String line = scanner.next();		long start = System.currentTimeMillis();		while (line.equals("0") == false) {			if (isTautology(line))				System.out.println("tautology");			else {				System.out.println("not");			}			line = scanner.next();		}		long end = System.currentTimeMillis();		//		System.out.println((end-start));	}	private static boolean isTautology(String line) { 		for (int i = 0; i < 2; i++) {			for (int j = 0; j < 2; j++) {				for (int k = 0; k < 2; k++) {					for (int l = 0; l < 2; l++) {						for (int m = 0; m < 2; m++) {							long t1 = System.currentTimeMillis();							int v = assignValue(line, i, j, k, l, m);							// System.out.println(i+","+j+","+k+","+l+","+m+", value = "							// +v);							long t2 = System.currentTimeMillis();//							System.out.println(t2-t1);							if (v != 1) {								return false;							}						}					}				}			}		} 		return true;	}	private static int assignValue(String line, int p, int q, int r, int s,			int t) { 		Stack<Character> stack = new Stack<Character>();		int value = -1;		if (line.length() > 1) {			switch (line.charAt(0)) {			case 'p':				value = p;				break;			case 'q':				value = q;				break;			case 'r':				value = r;				break;			case 's':				value = s;				break;			case 't':				value = t;				break;			case 'K':			case 'A':			case 'N':			case 'C':			case 'E':				stack.push(line.charAt(0));				break;			default:				break;			}		}		int index = 1;		while (stack.isEmpty() == false || index < line.length()) {			char next;			if (index < line.length())				next = line.charAt(index++);			else {				next = (char) stack.pop();			}			if (stack.isEmpty())				return char2int(next);			char top = (char) stack.peek();			value = top;			switch (next) {			case 'p':				if (top == 'N') {					stack.pop();					if (p == 1)						stack.push('0');					else {						stack.push('1');					}				} else if (top == 'K' || top == 'A' || top == 'C' || top == 'E') {					stack.push(int2char(p));				} else {// value					int value2 = p;					int value1 = (int) stack.pop();					char op = (char) stack.pop();					int val = cal(op, int2bool(value1), int2bool(value2));					stack.push(int2char(val));				}				break;			case 'q':				if (top == 'N') {					stack.pop();					if (q == 1)						stack.push('0');					else {						stack.push('1');					}				} else if (top == 'K' || top == 'A' || top == 'C' || top == 'E') {					stack.push(int2char(q));				} else {					int value2 = q;					int value1 = (int) stack.pop();					char op = (char) stack.pop();					int val = cal(op, int2bool(value1), int2bool(value2));					stack.push(int2char(val));				}				break;			case 'r':				if (top == 'N') {					stack.pop();					if (r == 1)						stack.push('0');					else {						stack.push('1');					}				} else if (top == 'K' || top == 'A' || top == 'C' || top == 'E') {					stack.push(int2char(r));				} else {					int value2 = r;					int value1 = (int) stack.pop();					char op = (char) stack.pop();					int val = cal(op, int2bool(value1), int2bool(value2));					stack.push(int2char(val));				}				break;			case 's':				if (top == 'N') {					stack.pop();					if (s == 1)						stack.push('0');					else {						stack.push('1');					}				} else if (top == 'K' || top == 'A' || top == 'C' || top == 'E') {					stack.push(int2char(s));				} else {					int value2 = s;					int value1 = (int) stack.pop();					char op = (char) stack.pop();					int val = cal(op, int2bool(value1), int2bool(value2));					stack.push(int2char(val));				}				break;			case 't':				if (top == 'N') {					stack.pop();					if (t == 1)						stack.push('0');					else {						stack.push('1');					}				} else if (top == 'K' || top == 'A' || top == 'C' || top == 'E') {					stack.push(int2char(t));				} else {					int value2 = t;					int value1 = (int) stack.pop();					char op = (char) stack.pop();					int val = cal(op, int2bool(value1), int2bool(value2));					stack.push(int2char(val));				}				break;			case 'K':			case 'A':			case 'N':			case 'C':			case 'E':				stack.push(next);				break;			case '1':				if (top == 'N') {					stack.pop();					stack.push('0');				} else if (top == 'K' || top == 'A' || top == 'C' || top == 'E') {					// stack.push(p);//no such case					System.out.println("error!");				} else {// value					int value2 = 1;					int value1 = char2int(stack.pop());					char op = (char) stack.pop();					int val = cal(op, int2bool(value1), int2bool(value2));					stack.push(int2char(val));				}				break;			case '0':				if (top == 'N') {					stack.pop();					stack.push('1');				} else if (top == 'K' || top == 'A' || top == 'C' || top == 'E') {					// stack.push(p);					System.out.println("not the case");				} else {// value					int value2 = 0;					int value1 = char2int(stack.pop());					char op = (char) stack.pop();					int val = cal(op, int2bool(value1), int2bool(value2));					stack.push(int2char(val));				}				break;			default:				break;			}		}		return value;	}	static boolean int2bool(int a) {		if (a == 1)			return true;		else {			return false;		}	}	static char int2char(int a) {		if (a == 1)			return '1';		else {			return '0';		}	}	static int char2int(char a) {		if (a == '1')			return 1;		else {			return 0;		}	}	private static int cal(char op, boolean value1, boolean value2) { 		boolean value = false; 		switch (op) {		case 'K':			value = value1 && value2;			break;		case 'A':			value = value1 || value2;			break;		case 'C':			value = !value1 || value2;			break;		case 'E':			value = value1 == value2;		default:			break;		}		if (value) {			return 1;		} else			return 0;	}}