package p3295_tautology_ac;import java.util.Scanner;import java.util.Stack;public class Main {	public static void main(String[] args) {		Scanner scanner = new Scanner(System.in);		String line = scanner.next();		long start = System.currentTimeMillis();		while (line.equals("0") == false) {			if (isTautology(line))				System.out.println("tautology");			else {				System.out.println("not");			}			line = scanner.next();		}		long end = System.currentTimeMillis();		//		System.out.println((end-start));	}	private static boolean isTautology(String line) { 		for (int i = 0; i < 2; i++) {			for (int j = 0; j < 2; j++) {				for (int k = 0; k < 2; k++) {					for (int l = 0; l < 2; l++) {						for (int m = 0; m < 2; m++) {							long t1 = System.currentTimeMillis();							int v = assignValue(line, i, j, k, l, m);							// System.out.println(i+","+j+","+k+","+l+","+m+", value = "							// +v);							long t2 = System.currentTimeMillis();//							System.out.println(t2-t1);							if (v != 1) {								return false;							}						}					}				}			}		} 		return true;	}	private static int assignValue(String line, int p, int q, int r, int s,			int t) { 		Stack<Character> stack = new Stack<Character>();		int value = -1;				int index = line.length() - 1 ;		char last = line.charAt(index);		switch (last) {		case 'p':			stack.push(int2char(p));			break;		case 'q':			stack.push(int2char(q)); 			break;		case 'r':			stack.push(int2char(r));			break;		case 's':			stack.push(int2char(s));			break;		case 't':			stack.push(int2char(t));			break;		 		}				while (stack.isEmpty() == false || index > 0) {			char next;			if (index > 0)			{				index --;				next = line.charAt(index);			}			else {				next = (char) stack.pop();			}			if (stack.isEmpty())				return char2int(next);			char top = (char) stack.peek();			value = top;			switch (next) {			case 'p':				stack.push(int2char(p));				break;			case 'q':				stack.push(int2char(q)); 				break;			case 'r':				stack.push(int2char(r));				break;			case 's':				stack.push(int2char(s));				break;			case 't':				stack.push(int2char(t));				break;			case 'K':			case 'A':			case 'N':			case 'C':			case 'E':				if (next == 'N') {					char topChar = stack.pop();					if (topChar == '1')						stack.push('0');					else {						stack.push('1');					}				} else if (next == 'K' || next == 'A' || next == 'C' || next == 'E') {										int value1 = char2int(stack.pop());					char topChar = stack.pop();					int value2 = char2int(topChar);										int val = cal(next, int2bool(value1), int2bool(value2));					stack.push(int2char(val));				} else {// value					stack.push(int2char(p));				}				break;			case '1':				 System.out.println("not the case1");				break;			case '0':				 System.out.println("not the case0");				break;			default:				break;			}		}		return value;	}	static boolean int2bool(int a) {		if (a == 1)			return true;		else {			return false;		}	}	static char int2char(int a) {		if (a == 1)			return '1';		else {			return '0';		}	}	static int char2int(char a) {		if (a == '1')			return 1;		else {			return 0;		}	}	private static int cal(char op, boolean value1, boolean value2) { 		boolean value = false; 		switch (op) {		case 'K':			value = value1 && value2;			break;		case 'A':			value = value1 || value2;			break;		case 'C':			value = !value1 || value2;			break;		case 'E':			value = value1 == value2;		default:			break;		}		if (value) {			return 1;		} else			return 0;	}}