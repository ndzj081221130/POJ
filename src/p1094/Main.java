package p1094;import java.util.Scanner;public class Main {	/**	 * @param args	 */	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner scanner = new Scanner(System.in);		int n = scanner.nextInt();		int m = scanner.nextInt();		while (!( n == 0 && m == 0)) {			int[][]edges = new int[n][n];			int[]count = new int[n];			for (int i = 0; i < m; i++) {				String e = scanner.next();				int start = e.charAt(0) - 'A';				int end = e.charAt(2) - 'A';				edges[start][end] += 1;				count[end]++;			}						output(n,m,edges,count);			System.out.println();			n = scanner.nextInt();			m = scanner.nextInt();		}	}	private static void output(int n, int m, int[][] edges,int[]count) {		// TODO Auto-generated method stub		TopologicalSort(n,m,edges,count);	}		static void TopologicalSort(int n,int m,int [][] edges,int []inDegrees){		int[]count = new int[n];		for (int i = 0; i < count.length; i++) {			count[i] = inDegrees[i];		}		int top  = -1;		for (int i = 0; i < count.length; i++) {			if (count[i] == 0) {				count[i] = top;				top = i;			}		}		int[][]repeats = new int[n][n];		for (int i = 0; i < n; i++) {			for (int j = 0; j < n; j++) {				repeats[i][j] = edges[i][j]; 			}		}		for (int i = 0; i < count.length; i++) {			if (top == -1) {				System.out.println("circle！ i = " + i);				return;			}else {				int v = top;				top = count[top];				System.out.print((v ) +" ");				int w = getFirstNeighbor(edges, v, n);								while(w!=-1){					if (-- count[w] == 0) {						count[w] = top;						top = w;													}					int repeat = repeats[v][w] ;					if(repeat <= 1)						w = getNextNeighbor(edges, v, w, n);					else{//w is not changed//						w = 					}					if(w!= -1)						repeats[v][w] --;				}			}					}									}	static int getFirstNeighbor(int[][] edges, int v, int n) {		if (v != -1) {			for (int col = 0; col < n; col++) {				if (edges[v][col] > 0 && edges[v][col] < Integer.MAX_VALUE) {					return col;				}			}		}		return -1;	}	static int getNextNeighbor(int[][] edges, int v, int w, int n) {		if (v != -1 && w != -1) {			for (int col = w + 1; col < n; col++) {				if (edges[v][col] > 0 && edges[v][col] < Integer.MAX_VALUE) {					return col;				}			}		}		return -1;	}}