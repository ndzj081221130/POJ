package p1573_ac;import java.util.ArrayList;import java.util.Scanner;public class Main {	/**	 * @param args	 */	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner scanner = new Scanner(System.in);//		String line = scanner.nextLine();		int rows = scanner.nextInt();		int cols = scanner.nextInt();		int startColumn = scanner.nextInt();		while (! (rows == 0 && cols == 0 && startColumn == 0)) {//			type type = (type) en.nextElement();			GridPoint[][] map = new GridPoint[rows+1][cols+1];			for (int i = 0; i < rows; i++) {				String instruction = scanner.next();				for (int j = 0; j < instruction.length(); j++) {					char dir = instruction.charAt(j);					GridPoint gridPoint = new GridPoint(i+1,j+1,dir);					map[i+1][j+1] = gridPoint;//				}			}						getPathResult(map,rows,cols,startColumn);			rows = scanner.nextInt();			cols = scanner.nextInt();			startColumn  = scanner.nextInt();		}					}	private static void getPathResult(GridPoint[][] map, int rows, int cols,			int startColumn) {		// TODO Auto-generated method stub		ArrayList<GridPoint> list = new ArrayList<GridPoint>();		GridPoint curGridPoint = map[1][startColumn];		list.add(curGridPoint);		GridPoint nextGridPoint = getNext(curGridPoint, rows, cols, map);		while (nextGridPoint != null) {			if (list.contains(nextGridPoint)) {				int index = list.indexOf(nextGridPoint);				int size = list.size() ;				int lo = size - index;				System.out.println(index +" step(s) before a loop of " + lo +" step(s)");				return;			}			list.add(nextGridPoint);			nextGridPoint = getNext(nextGridPoint, rows, cols, map);		}				int size = list.size();		System.out.println(size+" step(s) to exit");	}	static GridPoint getNext(GridPoint cur,int rows,int cols,GridPoint[][] map){		int x = cur.getX();		int y = cur.getY();		char dir = cur.getDir();		if(dir == 'N'){			int x_next = x-1;			if (x_next <= 0) {//出去了				return null;			}else {				return map[x_next][y];			}					}		else if( dir ==  'E'){			int next_y = y+1;			if (next_y > cols) {				return null;			}else {				return map[x][next_y];			}				}		else if( dir == 'S'){			int x_next = x+1;			if (x_next > rows) {				return null;			}else {				return map[x_next][y];			}		}		else// 'W':		{			int next_y = y-1;			if (next_y <= 0 ) {				return null;			}else {				return map[x][next_y];			}		}		 	}		static class GridPoint{		int x;		int y;		char dir;				public GridPoint(int x,int y,char d) {			// TODO Auto-generated constructor stub			this.x = x;			this.y = y;			this.dir = d;		}		public int getX() {			return x;		}		public void setX(int x) {			this.x = x;		}		public int getY() {			return y;		}		public void setY(int y) {			this.y = y;		}		public char getDir() {			return dir;		}		public void setDir(char dir) {			this.dir = dir;		}			}}