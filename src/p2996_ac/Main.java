package p2996_ac;import java.util.ArrayList;import java.util.Scanner;public class Main {	/**	 * @param args	 */	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner scanner = new Scanner(System.in);		// for (int i = 0; i < args.length; i++) {		//		// }		String line = scanner.nextLine();// +--- line 1		ArrayList<Black> blacks = new ArrayList<Black>();		ArrayList<White> whites = new ArrayList<White>();		int lineNo = 9;		// while (line != null)		for (int line_index = 0; line_index < 8; line_index++) {			line = scanner.nextLine();// å€¼			lineNo--;			String[] arr = line.split("\\|");			for (int i = 0; i < arr.length; i++) {				String string = arr[i];				if (string.length() == 3) {					char first = string.charAt(0);					char second = string.charAt(1);					if (second != ':' && second != '.') {						if (second >= 'a' && second <= 'z') {							blacks.add(new Black(i, lineNo, second));							// int						} else {							//							whites.add(new White(i, lineNo, second));						}					}				}			}			// if (line == null) {			// break;			// }			line = scanner.nextLine();// skip +---		}		// System.out.println(blacks);		// System.out.println(blacks);		// System.out.println(whites);		Sort(whites);		mySort(blacks);	}	static void printBlack(ArrayList<Black> blacks) {		// System.uo	}	static class Black {		int col;		int row;		char digital;		int digitalValue;		public Black(int c, int r, char d) {			this.row = r;			this.col = c;			this.digital = d;			this.digitalValue = getAssign(digital);		}		public int getCol() {			return col;		}		public void setCol(int col) {			this.col = col;		}		public int getRow() {			return row;		}		public void setRow(int row) {			this.row = row;		}		public char getDigital() {			return digital;		}		public void setDigital(char digital) {			this.digital = digital;			this.digitalValue = getAssign(digital);		}		public int getDigitalValue() {			return digitalValue;		}		public void setDigitalValue(int digitalValue) {			this.digitalValue = digitalValue;		}		public String toString() {			return "<" + col + "," + row + "," + digital + ">";		}		public boolean smallerThan(Black black) {			if (digitalValue < black.getDigitalValue()) {				return true;			} else if (digitalValue > black.getDigitalValue()) {				return false;			} else if (row > black.getRow()) {				return true;			} else if (row == black.getRow()) {				return col < black.getCol();			} else {				return false;			}		}		public String toStr() {			String str = "";			if (digital != 'p') {				str = "" + digital;				str = str.toUpperCase();			}			char di = (char) (col + 'a' - 1);			str += di;			str += row;			return str;		}	}	static int getAssign(char a) {		int re = -1;		switch (a) {		case 'k':			re = 0;			break;		case 'K':			re = 1;			break;		case 'q':			re = 2;			break;		case 'Q':			re = 3;			break;		case 'r':			re = 4;			break;		case 'R':			re = 5;			break;		case 'b':			re = 6;			break;		case 'B':			re = 7;			break;		case 'n':			re = 8;			break;		case 'N':			re = 9;			break;		case 'p':			re = 10;			break;		case 'P':			re = 11;			break;		default:			break;		}		return re;	}	static class White {		int col;		int row;		char digital;		int digitalValue;		public int getDigitalValue() {			return digitalValue;		}		public void setDigitalValue(int digitalValue) {			this.digitalValue = digitalValue;		}		public White(int c, int r, char d) {			this.row = r;			this.col = c;			this.digital = d;			this.digitalValue = getAssign(digital);		}		public int getCol() {			return col;		}		public void setCol(int col) {			this.col = col;		}		public int getRow() {			return row;		}		public void setRow(int row) {			this.row = row;		}		public char getDigital() {			return digital;		}		public void setDigital(char digital) {			this.digital = digital;		}		public String toString() {			return "<" + col + "," + row + "," + digital + ">";		}		public boolean smallerThan(White white) {			if (digitalValue < white.getDigitalValue()) {				return true;			} else if (digitalValue > white.getDigitalValue()) {				return false;			} else if (row < white.getRow()) {				return true;			} else if (row == white.getRow()) {				return col < white.getCol();			} else {				return false;			}		}		public String toStr() {			String str = "";			if (digital != 'P') {				str = "" + digital;				str = str.toUpperCase();			}			char di = (char) (col + 'a' - 1);			str += di;			str += row;			return str;		}	}	private static ArrayList<Black> mySort(ArrayList<Black> list) {		int i, j, k;		Black temp;		int n = list.size();		for (i = 0; i < n - 1; i++) {			k = i;			for (j = i + 1; j < n; j++) {				if (list.get(j).smallerThan(list.get(k)))// list.get(j).mostLeft()															// <															// list.get(k).mostLeft()					k = j;			}			if (i != k) {				temp = list.get(i);				list.set(i, list.get(k));				list.set(k, temp);			}		}		int l = 0;		System.out.print("Black: ");		for (l = 0; l < list.size() - 1; l++) {			System.out.print(list.get(l).toStr() + ',');		}		System.out.println(list.get(l).toStr());		return list;	}	private static void Sort(ArrayList<White> list) {		int i, j, k;		White temp;		int n = list.size();		for (i = 0; i < n - 1; i++) {			k = i;			for (j = i + 1; j < n; j++) {				if (list.get(j).smallerThan(list.get(k)))					k = j;			}			if (i != k) {				temp = list.get(i);				list.set(i, list.get(k));				list.set(k, temp);			}		}		int l = 0;		System.out.print("White: ");		for (l = 0; l < list.size() - 1; l++) {			System.out.print(list.get(l).toStr() + ',');		}		System.out.println(list.get(l).toStr());	}}