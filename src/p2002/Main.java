package p2002;import java.util.Scanner; public class Main {	/**	 * @param args	 */	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner scanner = new Scanner(System.in);		int n = scanner.nextInt();		while(n != 0){//			ArrayList<QPoint > points = new ArrayList<QPoint>();			QPoint points []= new QPoint[n];			int index = 0;			for (int i = 0; i < n ; i++) {				int x = scanner.nextInt();				int y = scanner.nextInt();//				points.add(new QPoint(x, y));				points[index++] = new QPoint(x, y);			}			countSquares(points, n);			n = scanner.nextInt();		}	}	private static void countSquares(QPoint[] points, int n) {		// TODO Auto-generated method stub		QuickSortLine(points, 0, n-1);//		for (int i = 0; i < points.length; i++) {//			System.out.print(points[i]);//		}//		System.out.println();//		int hash[] = new int[40001];//		int next[] = new int[10001];//		//		for (int i = 0; i < n; i++) {//			int value = Math.abs(points[i].x + points[i].y);//			next[i] = hash[value];//			hash[value] = i;//		}		int count =0;		for (int i = 0; i < points.length; i++) {			for (int j = i+1; j < points.length; j++) {				QPoint p1 = points[i];				QPoint p2 = points[j];				int x1 = p1.x;				int y1 = p1.y;				int x2 = p2.x;				int y2 = p2.y;								int x3 = y1-y2+x1;				int y3 = x2-x1+y1;				QPoint p3 = new QPoint(x3, y3);				int f3 = binarySearch(points, 0, n-1, p3);				if (f3 ==-1 ) {					continue;				}//				System.out.println("p3:"+p3);				int x4 = y1-y2+x2;				int y4 = x2-x1+y2;				QPoint p4 = new QPoint(x4, y4);//				System.out.println("p4:"+p4);								int f4 = binarySearch(points, 0, n-1, p4);								if ( f4 != -1) {					count ++;				}			}		}				count = count /2;		System.out.println(count);	}	private static void QuickSortLine(QPoint[] array,int left,int right) {		// TODO Auto-generated method stub		if (left < right) {			int pivotpos = partitionLine(array,left,right);			QuickSortLine(array, left, pivotpos-1);			QuickSortLine(array, pivotpos+1, right);		}	}	private static int partitionLine(QPoint[] array, int left, int right) {		int pivotpos = left;		QPoint pivot = array[left];		for (int in = left+1; in <= right; in++) {			if (array[in].compareTo(pivot) == -1) {				pivotpos++;				if (pivotpos != in) {//					for (int i = 0; i < array.length; i++) {//						System.out.println(array[i]);//					}//					//					System.out.println("---");					SwapLine(array,pivotpos,in);				}			}					}		array[left] = array[pivotpos];		array[pivotpos] = pivot;		return pivotpos;	}	private static void SwapLine(QPoint[] array, int pivotpos, int i) {		QPoint temp = array[i];		array[i] = array[pivotpos];		array[pivotpos] = temp;	}		static int binarySearch(QPoint[] points ,int low,int high , QPoint point ){		int mid = -1;		if (low <= high) {			mid = (low+high)/2;			int flag = point.compareTo(points[mid]);			if ( flag == 1) {				mid = binarySearch(points, mid+1, high, point);			}else if(flag == -1){				mid = binarySearch(points, low, mid-1, point);			}		}		return mid;	}		static class QPoint{		int x;		int  y;		public QPoint(int x,int y) { 			this.x = x;			this.y = y;					}				public String toString(){			return "("+x+","+y+")";		}		int compareTo(QPoint p){			if (x < p.x) {				return -1;			}else if(x == p.x){				if (y < p.y) {					return -1;				}else if(y == p.y) {					return 0;				}				else {					return 1;				}			}			else {				return 1;			}		}				public boolean equals(Object obj){			QPoint point = (QPoint) obj;			if (x == point.x && y == point.y) {				return true;			}			return false;		}	}}