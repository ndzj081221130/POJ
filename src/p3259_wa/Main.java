package p3259_wa;import java.util.Scanner;public class Main {	/**	 * @param args	 */	static boolean checkReplicateEdge(Path[] paths,Path path,int index){		 		for (int k = 0;k<index;k++) {			Path p = paths[k];			if (p.getStart() == path.getStart() && p.getEnd() == path.getEnd() && p.getWeight() > path.getWeight()) {				p.setWeight(path.weight);				return true;			}		}		return false;	}	public static void main(String[] args) { 		Scanner scanner = new Scanner(System.in);		int F = scanner.nextInt();		for (int i = 0; i < F; i++) {			int N = scanner.nextInt();			int M = scanner.nextInt();			int W = scanner.nextInt();			Path[]paths = new Path[2*M+W+1];			int index = 1;			for (int j = 0; j < M; j++) {				int start = scanner.nextInt();				int end = scanner.nextInt();				int weight = scanner.nextInt();				Path SE =  new Path(start, end, weight); 				paths[index++] = SE;				Path ES =  new Path(end, start, weight);				paths[index++] = ES;			}			for (int j = 0; j < W; j++) {				int start_m = scanner.nextInt();				int end_m = scanner.nextInt();				int weight_m = scanner.nextInt();				paths[index++] = new Path(start_m, end_m, weight_m * (-1));			}						output(N,paths);		}	}	private static void output(int n, Path[] paths) {		// TODO Auto-generated method stub		if (bellmanford(n,paths,1) == false) {			System.out.println("YES");		}else {			System.out.println("NO");		}	}	private static boolean bellmanford(int n, Path[] paths,int s) {		// TODO Auto-generated method stub		int[] d = new int[n+1];		for (int i = 0; i < d.length; i++) {			d[i] = Integer.MAX_VALUE;		}		d[s] = 0;		for (int i = 1; i < n; i++) {			for (int j = 1; j < paths.length; j++) {				relax(paths[j],d);			}		} 		for(int i=1;i<= n;i++){			int u = paths[i].start;			int v = paths[i].end;			int w = paths[i].weight;			if (d[v] > d[u] + w) {				return false;			}		}		return true;	}	private static void relax(Path path,int[]d) { 		int u = path.getStart();		int v = path.getEnd();		if (d[v] > d[u] + path.getWeight()) {			d[v] = d[u] + path.getWeight();		}	}	static class Path{		int start;		int end;		int weight;		Path(int s,int e,int w){			start =s;			end=e;			weight = w;		}		public int getStart() {			return start;		}		public void setStart(int start) {			this.start = start;		}		public int getEnd() {			return end;		}		public void setEnd(int end) {			this.end = end;		}		public int getWeight() {			return weight;		}		public void setWeight(int weight) {			this.weight = weight;		}			}}