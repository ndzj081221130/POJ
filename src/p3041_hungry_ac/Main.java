package p3041_hungry_ac;import java.util.Scanner;public class Main {	int n;	int[] match;	boolean[] used;	boolean[][] map;	public Main(int n, boolean[][] values) {		this.n = n;		map = values;		match = new int[n + 1];		for (int i = 1; i <= n ; i++) {			match[i]=-1;		}		System.out.print(hungary());	}	boolean dfs(int k) {//		System.out.println("call dfs");		int i;		for (i = 1; i <= n; i++)			if (map[k][i] && !used[i]) {//找到第一个跟k点相连，且未被使用的节点				used[i] = true;				if (match[i] == -1 || dfs(match[i])) {					match[i] = k;					return true;//只找到第一个？				}			}		return false;	}	int hungary() {		int i, res;		res = 0;		for (i = 1; i <= n; i++) {			used = new boolean[n + 1];			if (dfs(i))			{				res++;//				System.out.println(i+" true");			}		}		return res;	}	/**	 * @param args	 */	public static void main(String[] args) {		int n, k, i, r, c;		Scanner scanner = new Scanner(System.in);		n = scanner.nextInt();		k = scanner.nextInt();		boolean[][] mapValue = new boolean[n + 1][n + 1];		for (i = 0; i < k; i++) {			r = scanner.nextInt();			c = scanner.nextInt();			mapValue[r][c] = true;		}//		for (int j = 0; j < mapValue.length; j++) {//			for (int j2 = 0; j2 < mapValue.length; j2++) {//				System.out.println(mapValue[j][j2]);//			}//			System.out.println();//		}				new Main(n, mapValue);	}}