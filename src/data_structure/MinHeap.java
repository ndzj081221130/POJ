package data_structure;import java.util.ArrayList;public class MinHeap {			public MinHeap(int sz) {		heap = new ArrayList<MSTEdgeNode>();		currentSize = 0;	}	public int getAll() {		int all = 0;		for (MSTEdgeNode edgeNode : heap) {			all += edgeNode.key;		}//		System.out.println(heap);		return all;	}	boolean insert(MSTEdgeNode x) {		if (heap.contains(x) == false) {			heap.add(x);			siftUp(currentSize);			currentSize++;			return true;		} else {			return false;		}	}	MSTEdgeNode removeMin() {		MSTEdgeNode x = heap.get(0);		heap.set(0, heap.get(currentSize - 1));		heap.remove(currentSize-1);		currentSize--;		siftDown(0, currentSize - 1);		return x;	}	boolean isEmpty() {		return (currentSize == 0) ? true : false;	}	boolean isFull() {		return (currentSize == maxHeapSize);	}	void MakeEmpty() {		currentSize = 0;		heap = null;	}	ArrayList<MSTEdgeNode> heap;	int currentSize;	int maxHeapSize;	void siftDown(int start, int end) {		int i = start;		int j = 2 * i + 1;		MSTEdgeNode temp = heap.get(i);		while (j <= end) {			if (j < end && heap.get(j).key > heap.get(j + 1).key) {				j++;			}			if (temp.key <= heap.get(j).key)				break;			else {				heap.set(i, heap.get(j));				i = j;				j = 2 * j + 1;			}		}		heap.set(i, temp);	}	void siftUp(int start) {		int j = start;		int i = (j - 1) / 2;		MSTEdgeNode temp = heap.get(j);		while (j > 0) {			if (heap.get(i).key <= temp.key) {				break;			} else {				heap.set(j, heap.get(i));				j = i;				i = (i - 1) / 2;			}		}		heap.set(j, temp);	}}