package p2965_refrigerator_TLE;import java.util.Scanner;public class Main {	/**	 * @param args	 */	boolean map[][];	boolean find = false;	int[]ri;	int []cj;	public Main(){		ri = new int[16];		cj = new int[16];	}	public boolean isFind() {		return find;	}	public void setFind(boolean find) {		this.find = find;	}	public static void main(String[] args) {		// TODO Auto-generated method stub		boolean[][] map = new boolean[6][6];		Scanner scanner = new Scanner(System.in);		for (int i = 1; i <= 4; i++) {			String c = scanner.next();			for (int j = 1; j <= 4; j++) {				if (c.charAt(j - 1) == '-')					map[i][j] = true;				else {					map[i][j] = false;				}			}		}		Main main = new Main();		main.setMap(map);		int step;		for (step = 0; step <= 16; step++) {			main.dfs(1, 1, 0, step);			if (main.isFind()) {				break;			}		}		if (main.isFind()) {			System.out.println(step);//						int[] r = main.getRi();			int[] c = main.getCj();			for (int i = 0; i < step; i++) {				System.out.println(r[i]+" " + c[i]);			}		} else {			System.out.println("Impossible");		}	}	public int[] getRi() {		return ri;	}	public void setRi(int[] ri) {		this.ri = ri;	}	public int[] getCj() {		return cj;	}	public void setCj(int[] cj) {		this.cj = cj;	}	private void dfs(int row, int col, int dep, int step) {		// dep是当前翻动的次数，（row，col）是当前操作的点		if (dep == step) {			find = isgoal();			return;		}				if (find || row == 5)			return;// row=5时，遍历已结束				ri[dep] = row;		cj[dep] = col;				flip(row, col);// 对(row,col)翻转		if (col < 4) {			// list.add(row+" "+col);			dfs(row, col + 1, dep + 1, step   );// 同一行向后		} else {// 下一行		// list.add(row+" "+col);			dfs(row + 1, 1, dep + 1, step );		}		flip(row, col);// 不翻转(row,col)		if (col < 4) {			dfs(row, col + 1, dep, step );		} else {			dfs(row + 1, 1, dep, step );		}	}	public boolean[][] getMap() {		return map;	}	public void setMap(boolean[][] map) {		this.map = map;	}	boolean isgoal() { // 判断矩阵的所有格子是否为同一个颜色。		for (int i = 1; i <= 4; i++)			for (int j = 1; j <= 4; j++)				if (map[i][j] != true)					return false;		return true;	}	void flip(int row, int col) { // 翻动点(row,col)时的map[][]的变化。		for (int i = 1; i <= 4; i++) {			map[row][i] = !map[row][i];			map[i][col] = !map[i][col];		}		map[row][col] = !map[row][col];	}}