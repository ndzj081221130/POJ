package p1000;import java.util.Scanner;public class Main {	boolean map[][];	boolean find =false;	int dr[] = {0,0,1,1};	int dc[] = {0,1,0,1};	public boolean[][] getMap() {		return map;	}	public void setMap(boolean[][] map) {		this.map = map;	}	public boolean isFind() {		return find;	}	public void setFind(boolean find) {		this.find = find;	}	public static void main(String[] args) {		// TODO Auto-generated method stub		Scanner scanner = new Scanner(System.in);		int n = scanner.nextInt();		int m = scanner.nextInt();		int[][]array = new int[n][n];		boolean[][] map = new boolean[n][n];		for (int i = 0; i < array.length; i++) {			for (int j = 0; j < array.length; j++) {				array[i][j] = scanner.nextInt();					if(array[i][j] == 1)					map[i][j] = true;			}		}				Main main = new Main();		main.setMap(map);		int step ;		for(step = 0; step <= (n-m+1) * (n-m+1) ; step ++){			main.dfs(0,0,0,step,n,m);			if(main.isFind())				break;		}		if(main.isFind())			System.out.println(step);		else {			System.out.println(-1);		}//		int t = n-m+1;//		//		for(int i = 0 ;i < n-m+1;i++){//			for(int j = 0 ; j < n-m+1;j++){//				if(array[i][j] == 1)//					map[i][j] = true;//			}//		}		//		System.out.println(fac(n,m,array));	}	private void dfs(int row, int col, int dep, int step,int n,int m) {		// TODO Auto-generated method stub		if(dep == step){			find = isgoal();			return;		}				if(find || row == n-m+1)			return;				flip(row,col);		if(col < n-m){			dfs(row, col+1, dep+1, step, n, m);		}else {			dfs(row+1, 0, dep+1, step, n, m);		}				flip(row,col);		if(col < n-m){			dfs(row, col+1, dep, step, n, m);		}else {			dfs(row+1, 0, dep, step, n, m);		}	}	private boolean isgoal() {		// TODO Auto-generated method stub		for (int i = 0; i < map.length; i++) {			for (int j = 0; j < map.length; j++) {				if(map[i][j] == false)					return false;			}		}		return true;	}	private void flip(int row, int col) {		// TODO Auto-generated method stub		for (int i = 0; i < 4; i++) {			int r = row+dr[i];			int c = col +dc[i];			map[r][c] = !map[r][c];		}	} }