package p2240_ac_floyd;import java.util.HashMap;import java.util.Scanner;public class Main {	static boolean  floyd(int n,double [][]edges){		double a[][] = new double[n][n];		int path[][] = new int[n][n];		for (int i = 0; i < n; i++) {			for (int j = 0; j < n; j++) {				a[i][j] = edges[i][j];				if (i!=j && a[i][j] > 0) {					path[i][j] = i;				}else {					path[i][j] = 0;				}			}					}				for (int k = 0; k < n; k++) {			for (int i = 0; i < n; i++) {				for (int j = 0; j < n; j++) {					if (a[i][k] * a[k][j] > a[i][j]) {						a[i][j] = a[i][k] * a[k][j];						path[i][j] = path[k][j];					}				}			}		}				for (int i = 0; i < n; i++) {			for (int j = 0; j < n; j++) {				if(a[i][j] * edges[j][i] > 1)					return true;			}		}		return false;	}	/**	 * @param args	 */	public static void main(String[] args) {		Scanner scanner = new Scanner(System.in);		int n = scanner.nextInt();		int index = 1;		while(n!=0){ 			HashMap<String, Integer> maps = new HashMap<String,Integer>();			for (int i = 0; i < n; i++) {				maps.put(scanner.next(), maps.size());			}			int  m = scanner.nextInt();			double[][] edges = new double[n][n];			for (int i = 0; i < n; i++) {				for (int j = 0; j < n; j++) {					if(i!=j)						edges[i][j] = 0;					else {						edges[i][j] = 1;					}				}			}			for (int j = 0; j < m; j++) {				int start = maps.get(scanner.next());				double value = scanner.nextDouble();				int end = maps.get(scanner.next());				edges[start][end] = value;			}			boolean flag = floyd(n,edges); 			if (flag) {				System.out.println("Case " + index +": Yes");			}else {				System.out.println("Case " + index +": No");			}						index++;			n= scanner.nextInt();		}	}}